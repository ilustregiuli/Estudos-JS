* Modelo de classe em JS:

 class ContaCorrente{
     agencia;
     saldo;
 
     sacar(valor){
         if(this.saldo >= valor){
             this.saldo -= valor
         }
     }

     depositar(valor) {
         if(valor > 0){
             this.saldo += valor
         }
     }
 }

* para deixar um atributo como "private" usar uma "#" antes do atributo

 #saldo

-- ps: funciona em alguns lugares, n�o � uma conven��o oficial; Funciona no node a partir da vers�o 12 --

-- ps2: conven��o da comunidade: foi definido usar o underline antes da vari�vel para definir que o atributo � privado (ex: _saldo).
Apesar de n�o ser impedido de usar o atributo, por conven��o n�o devemos alterar o atributo fora da classe. --


*** IMPORTANTE ***

As classes e os atributos e vari�veis em JS s�o dinamicamente tipadas. Ou seja, se eu crio uma classe, essa classe tem alguns atributos.
MAS se em tempo de execu��o, for criado OUTRO atributo para aquele objeto, o JS vai aceitar esse novo atributo.
OU seja, um atributo que for privado (com "#" ) vai ser diferente do mesmo atributo que n�o � privado (o mesmo nome, mas sem o "#").

* palavra "return" - quando usado, para a execu��o da fun��o no ponto que estiver

* early return - usado para deixar o c�digo mais leg�vel. Se faz primeiro a verifica��o e caso der certo, o c�digo continua executando,
se n�o, ele encontra um "return" e para a execu��o.

Ex: if(valor <= 0) return  -- com "if" de uma s� linha, pode ser colocado ao lado sem chaves

* Na cria��o de classe, usar o nome da classe em cada arquivo com a primeira letra maiuscula

**** M�DULOS EM JAVASCRIPT ****

Usado para usar defini��es, vari�veis e fun��es de outros arquivos.

COMO USAR:

* Na defini��o que ser� "exportada"

export class Cliente

* No local onde ser� "importado", consumido a defini��o (usado a fun��o, classe, vari�vel, etc)

import {Cliente} from "./Cliente.js"

Todo framework ou outro interpretador (como NODE, como React.js) deve ter uma configura��o padr�o para utilizar os m�dulos.
Ao tentar utilizar os imports e exports, deve ser usado dentro de um m�dulo. Por exemplo, o interpretador do NODE n�o interpreta
arquivos como m�dulo, e sim como SCRIPTS. Para que ele saiba que um arquivo index.js por exemplo, � um m�dulo, deve-se usar
um arquivo de configura��o (package.json) e alterar uma configura��o no "type": "module" e o NODE saiba que o "index.js" se trata
de um m�dulo e n�o script.

Para criar o arquivo de configura��o, rodar o comando: >npm init

Vai ser solicitado preencher alguns dados (nome projeto, vers�o, author, etc). Ap�s preencher, ser� gerado o arquivo "package.json"
com as informa��es preenchidas. 

Depois, podemos setar o arquivo com:

"type" : "module"

... que poder� ent�o usar o index.js como um "m�dulo"

* tag "scripts" do package.json
Utilizada para facilitar e rodar scripts que seriam muito longos ou precise de v�rios par�metros.
Pode ser utilizado para iniciar a aplica��o, colocando o arquivo inicial (index.js)

"scripts": {
    "start": "node index.js"
}

... e no terminal, rodar ent�o: >npm start


*** COMPOSI��O *****

 - Associar uma classe a outra (conta-corrente com um objeto Cliente)

*** TIPOS VALOR E TIPO REFER�NCIA

Em JS, quando passamos um par�metro do tipo VALOR (primitivo), n�o estamos usando a vari�vel em si, mas sim uma c�pia dela.
Portanto, se passarmos uma vari�vel do tipo valor e ela for alterada durante o programa, ou passarmos esse valor para outra vari�vel,
a vari�vel original continuar� com o mesmo valor, pois estavamos passando uma c�pia do valor, e n�o a vari�vel propriamente dita.

Ex. 

a = 1;  
b = a;  
a = a + 1;

escrever "a" -> 2
escrever "b" -> 1  --> "b" continua valendo "1" pois s� recebeu a c�pia do valor de "a" e n�o a refer�ncia.

Caso "a" e "b" fossem objetos, e "b" = "a", ent�o sim seria alterado "b" tamb�m, pois "b" � uma referencia a "a".

*** Null e Undefined ***

Null -> quando � expl�cito que alguma vari�vel � nula (de prop�sito)

Undefined -> quando n�o foi espec�ficado nenhum valor ou refer�ncia para algo (sem querer)

***** GETTERS e SETTERS *****

- Setter
set atributo(valor) { 
   if(valor instanceof minhaClasse){
	this.atributo = valor
   }			
}

- Getter

get atributo() {
   return this._atributo
}

PS: n�o � necess�rio usar o nome do m�todo, pode-se fazer as atribu��es com " = "

Ex:

	minhaClasse.atributo = valor 		(SET)

	console.log(minhaClasse.atributo) 	(GET)

PS2: usando somente o "get", n�o � poss�vel alterar o valor de um atributo privado, fazendo assim um encapsulamento dele (private)


**** CONSTRUTOR **** 

Dentro da classe, colocar:

constructor (atributo_1, atributo_2) {
   this.atributo_1 = atributo_1
   this.atributo_2 = atributo_2
}


***** ATRIBUTOS EST�TICOS ****

Ao setarmos um atributo de um objeto de uma classe, estamos setando (alterando, modificando, processando) somente o atributo daquele objeto
espec�fico. Mas se dejarmos fazer com que TODOS os objetos dessa mesma classe, seja processado (ou seja, tenha o mesmo comportamento
em todas as instancias), significa que se esse atributo � processado sempre em TODOS os objetos do programa.

ex: 

static atributoStatic

contructor (atributo) {
   this.atributo = atributo;
   MinhaClasse.atributoStatic = valor;	
}

console.log(MinhaClasse.atributoStatic)