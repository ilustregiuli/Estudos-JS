* Modelo de classe em JS:

 class ContaCorrente{
     agencia;
     saldo;
 
     sacar(valor){
         if(this.saldo >= valor){
             this.saldo -= valor
         }
     }

     depositar(valor) {
         if(valor > 0){
             this.saldo += valor
         }
     }
 }

* para deixar um atributo como "private" usar uma "#" antes do atributo

 #saldo

-- ps: funciona em alguns lugares, não é uma convenção oficial; Funciona no node a partir da versão 12 --

-- ps2: convenção da comunidade: foi definido usar o underline antes da variável para definir que o atributo é privado (ex: _saldo). Apesar de não ser impedido de usar o atributo, por convenção não devemos alterar o atributo fora da classe. --


*** IMPORTANTE ***

As classes e os atributos e variáveis em JS são dinamicamente tipadas. Ou seja, se eu crio uma classe, essa classe tem alguns atributos. MAS se em tempo de execução, for criado OUTRO atributo para aquele objeto, o JS vai aceitar esse novo atributo. OU seja, um atributo que for privado (com "#" ) vai ser diferente do mesmo atributo que não é privado (o mesmo nome, mas sem o "#").

* palavra "return" - quando usado, para a execução da função no ponto que estiver

* early return - usado para deixar o código mais legível. Se faz primeiro a verificação e caso der certo, o código continua executando, se não, ele encontra um "return" e para a execução.

Ex: if(valor <= 0) return  -- com "if" de uma só linha, pode ser colocado ao lado sem chaves

* Na criação de classe, usar o nome da classe em cada arquivo com a primeira letra maiuscula

**** MÓDULOS EM JAVASCRIPT ****

Usado para usar definições, variáveis e funções de outros arquivos.

COMO USAR:

* Na definição que será "exportada"

export class Cliente

* No local onde será "importado", consumido a definição (usado a função, classe, variável, etc)

import {Cliente} from "./Cliente.js"

Todo framework ou outro interpretador (como NODE, como React.js) deve ter uma configuração padrão para utilizar os módulos. Ao tentar utilizar os imports e exports, deve ser usado dentro de um módulo. Por exemplo, o interpretador do NODE não interpreta arquivos como módulo, e sim como SCRIPTS. Para que ele saiba que um arquivo index.js por exemplo, é um módulo, deve-se usar um arquivo de configuração (package.json) e alterar uma configuração no "type": "module" e o NODE saiba que o "index.js" se trata de um módulo e não script.

Para criar o arquivo de configuração, rodar o comando: >npm init

Vai ser solicitado preencher alguns dados (nome projeto, versão, author, etc). Após preencher, será gerado o arquivo "package.json" com as informações preenchidas. 
Depois, podemos setar o arquivo com:

"type" : "module"

... que poderá então usar o index.js como um "módulo"
